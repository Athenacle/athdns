#include "test.h"
#include "dns.h"

using namespace dns;

TEST(DNS, dnsTest1)
{
    uint8_t packet_bytes[] = {0x03, 0x00, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
                              0x00, 0x00, 0x06, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x03,
                              0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01, 0x00, 0x01};

    auto dp = DnsPacket::fromDataBuffer(packet_bytes, sizeof packet_bytes);
    dp->parse();
    EXPECT_TRUE(dp->isQuery());
    EXPECT_FALSE(dp->isResponse());
    EXPECT_EQ(0x0300, dp->getQueryID());
    EXPECT_EQ(0x0100, dp->getFlag());
    EXPECT_EQ(dns_values::DNS_OPCODE_STAND_QUERY, dp->getOPCode());
    EXPECT_FALSE(dp->isAA());

    auto &q = dp->getQuery();
    EXPECT_STRCASEEQ("github.com", q.getName());
    EXPECT_EQ(q.getType(), Query::QUERY_TYPE_A);
    EXPECT_EQ(q.getClass(), Query::QUERY_CLASS_IN);

    delete dp;
}

TEST(DNS, dnsTest2_large_response)
{
    uint8_t packet_bytes[] = {
        0xe1, 0xda, 0x81, 0x80, 0x00, 0x01, 0x00, 0x03, 0x00, 0x0d, 0x00, 0x05, 0x05, 0x71, 0x75,
        0x65, 0x72, 0x79, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x03, 0x63, 0x6d, 0x73, 0x02, 0x72, 0x74,
        0x09, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x03, 0x63, 0x6f, 0x6d, 0x00,
        0x00, 0x01, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x02, 0x70, 0x00,
        0x2d, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x04, 0x70, 0x72, 0x6f, 0x64, 0x03, 0x63, 0x6d,
        0x73, 0x02, 0x72, 0x74, 0x09, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x6f, 0x66, 0x74, 0x03,
        0x63, 0x6f, 0x6d, 0x07, 0x65, 0x64, 0x67, 0x65, 0x6b, 0x65, 0x79, 0x03, 0x6e, 0x65, 0x74,
        0x00, 0xc0, 0x3d, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x4a, 0xd0, 0x00, 0x16, 0x06, 0x65,
        0x31, 0x31, 0x30, 0x37, 0x30, 0x01, 0x62, 0x0a, 0x61, 0x6b, 0x61, 0x6d, 0x61, 0x69, 0x65,
        0x64, 0x67, 0x65, 0xc0, 0x65, 0xc0, 0x76, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x9d,
        0x00, 0x04, 0x17, 0xc8, 0xe8, 0x8a, 0xc0, 0x7f, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x96,
        0x52, 0x00, 0x0a, 0x07, 0x61, 0x31, 0x32, 0x2d, 0x31, 0x39, 0x32, 0xc0, 0x7f, 0xc0, 0x7f,
        0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x96, 0x52, 0x00, 0x09, 0x06, 0x61, 0x36, 0x2d, 0x31,
        0x39, 0x32, 0xc0, 0x7f, 0xc0, 0x7f, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x96, 0x52, 0x00,
        0x09, 0x06, 0x61, 0x31, 0x2d, 0x31, 0x39, 0x32, 0xc0, 0x7f, 0xc0, 0x7f, 0x00, 0x02, 0x00,
        0x01, 0x00, 0x00, 0x96, 0x52, 0x00, 0x0a, 0x07, 0x6e, 0x73, 0x33, 0x2d, 0x31, 0x39, 0x34,
        0xc0, 0x7f, 0xc0, 0x7f, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x96, 0x52, 0x00, 0x0a, 0x07,
        0x61, 0x31, 0x33, 0x2d, 0x31, 0x39, 0x32, 0xc0, 0x7f, 0xc0, 0x7f, 0x00, 0x02, 0x00, 0x01,
        0x00, 0x00, 0x96, 0x52, 0x00, 0x0a, 0x07, 0x6e, 0x73, 0x36, 0x2d, 0x31, 0x39, 0x34, 0xc0,
        0x7f, 0xc0, 0x7f, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x96, 0x52, 0x00, 0x0a, 0x07, 0x6e,
        0x73, 0x35, 0x2d, 0x31, 0x39, 0x34, 0xc0, 0x7f, 0xc0, 0x7f, 0x00, 0x02, 0x00, 0x01, 0x00,
        0x00, 0x96, 0x52, 0x00, 0x07, 0x04, 0x6c, 0x61, 0x72, 0x32, 0xc0, 0x7f, 0xc0, 0x7f, 0x00,
        0x02, 0x00, 0x01, 0x00, 0x00, 0x96, 0x52, 0x00, 0x06, 0x03, 0x6c, 0x61, 0x31, 0xc0, 0x7f,
        0xc0, 0x7f, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x96, 0x52, 0x00, 0x06, 0x03, 0x6c, 0x61,
        0x33, 0xc0, 0x7f, 0xc0, 0x7f, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x96, 0x52, 0x00, 0x0a,
        0x07, 0x61, 0x32, 0x38, 0x2d, 0x31, 0x39, 0x32, 0xc0, 0x7f, 0xc0, 0x7f, 0x00, 0x02, 0x00,
        0x01, 0x00, 0x00, 0x96, 0x52, 0x00, 0x0a, 0x07, 0x61, 0x31, 0x31, 0x2d, 0x31, 0x39, 0x32,
        0xc0, 0x7f, 0xc0, 0x7f, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x96, 0x52, 0x00, 0x0a, 0x07,
        0x6e, 0x73, 0x37, 0x2d, 0x31, 0x39, 0x34, 0xc0, 0x7f, 0xc1, 0x53, 0x00, 0x01, 0x00, 0x01,
        0x00, 0x00, 0x96, 0x52, 0x00, 0x04, 0xb8, 0x1a, 0xa1, 0xc0, 0xc1, 0x65, 0x00, 0x01, 0x00,
        0x01, 0x00, 0x00, 0x96, 0x52, 0x00, 0x04, 0x5f, 0x65, 0x24, 0xc0, 0xc1, 0x40, 0x00, 0x01,
        0x00, 0x01, 0x00, 0x00, 0x96, 0x52, 0x00, 0x04, 0x02, 0x10, 0x28, 0xc0, 0xc0, 0xd3, 0x00,
        0x01, 0x00, 0x01, 0x00, 0x00, 0x33, 0xf5, 0x00, 0x04, 0xc1, 0x6c, 0x58, 0x00, 0xc0, 0xbe,
        0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x96, 0x52, 0x00, 0x04, 0x17, 0xd3, 0x85, 0xc0};

    auto dp = DnsPacket::fromDataBuffer(packet_bytes, sizeof packet_bytes);
    dp->parse();
    EXPECT_TRUE(dp->isResponse());
    EXPECT_EQ(dp->getQueryID(), 0xe1da);
    EXPECT_EQ(dp->getFlag(), 0x8180);
    EXPECT_EQ(dp->getQuestionCount(), 1);
    EXPECT_EQ(dp->getAnswerRRCount(), 3);
    EXPECT_EQ(dp->getAuthorityRRCount(), 13);
    EXPECT_EQ(dp->getAdditionalRRCount(), 5);
    delete dp;
}

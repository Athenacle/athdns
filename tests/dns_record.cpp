#include "test.h"

#include "dns.h"

using namespace dns;
using namespace dns_utils;
using namespace dns_values;

TEST(DNS_record, to_data_1)
{
    // www.office.com
    uint8_t packet_bytes[] = {
        0xba, 0xcb, 0x81, 0x80, 0x00, 0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x03, 0x77, 0x77,
        0x77, 0x06, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x01,
        0x00, 0x01, 0xc0, 0x0c, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x02, 0x2a, 0x00, 0x1c, 0x03,
        0x67, 0x65, 0x6f, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x06, 0x6f, 0x66, 0x66, 0x69, 0x63, 0x65,
        0x06, 0x61, 0x6b, 0x61, 0x64, 0x6e, 0x73, 0x03, 0x6e, 0x65, 0x74, 0x00, 0xc0, 0x2c, 0x00,
        0x05, 0x00, 0x01, 0x00, 0x00, 0x01, 0x2c, 0x00, 0x0d, 0x0a, 0x6e, 0x6f, 0x6e, 0x75, 0x73,
        0x5f, 0x65, 0x64, 0x67, 0x65, 0xc0, 0x30, 0xc0, 0x54, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00,
        0x01, 0x2c, 0x00, 0x25, 0x12, 0x68, 0x6f, 0x6d, 0x65, 0x2d, 0x6f, 0x66, 0x66, 0x69, 0x63,
        0x65, 0x33, 0x36, 0x35, 0x2d, 0x63, 0x6f, 0x6d, 0x06, 0x62, 0x2d, 0x30, 0x30, 0x30, 0x34,
        0x08, 0x62, 0x2d, 0x6d, 0x73, 0x65, 0x64, 0x67, 0x65, 0xc0, 0x43, 0xc0, 0x6d, 0x00, 0x05,
        0x00, 0x01, 0x00, 0x00, 0x01, 0x2c, 0x00, 0x02, 0xc0, 0x80, 0xc0, 0x80, 0x00, 0x01, 0x00,
        0x01, 0x00, 0x00, 0x01, 0x2c, 0x00, 0x04, 0x0d, 0x6b, 0x06, 0x9c};


    DnsPacket *pack = DnsPacket::fromDataBuffer(packet_bytes, sizeof(packet_bytes));
    pack->parse();
    record_node *node = pack->generate_record_node();

    dns_package_builder builder;
    builder.as_response().set_query(pack->getQuery()).set_answer_record(node);
    if (pack->isRD()) {
        builder.set_RD().set_resp_RA();
    }
    builder.set_id(pack->getQueryID()).set_opcode(DNS_OPCODE_STAND_QUERY);

    DnsPacket *result = builder.build();
    result->parse();

    ASSERT_EQ(result->get_size(), pack->get_size());
    ASSERT_EQ(result->get_size(), sizeof(packet_bytes));
    EXPECT_TRUE(memcmp(result->get_data(), packet_bytes, sizeof(packet_bytes)) == 0);
    delete result;
    delete pack;
    delete node;
}

TEST(DNS_record, to_data_2)
{
    // sql.athenacle.xyz -> files -> git -> master -> 10.70.20.11
    uint8_t packet_bytes[] = {
        0x6b, 0x3a, 0x81, 0x80, 0x00, 0x01, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x03, 0x73,
        0x71, 0x6c, 0x09, 0x61, 0x74, 0x68, 0x65, 0x6e, 0x61, 0x63, 0x6c, 0x65, 0x03, 0x78,
        0x79, 0x7a, 0x00, 0x00, 0x01, 0x00, 0x01, 0xc0, 0x0c, 0x00, 0x05, 0x00, 0x01, 0x00,
        0x00, 0x01, 0x2b, 0x00, 0x08, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0xc0, 0x10, 0xc0,
        0x2f, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x01, 0x2c, 0x00, 0x06, 0x03, 0x67, 0x69,
        0x74, 0xc0, 0x10, 0xc0, 0x43, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x01, 0x2c, 0x00,
        0x09, 0x06, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0xc0, 0x10, 0xc0, 0x55, 0x00, 0x01,
        0x00, 0x01, 0x00, 0x01, 0x51, 0x7f, 0x00, 0x04, 0x0a, 0x46, 0x14, 0x0b};

    DnsPacket *pack = DnsPacket::fromDataBuffer(packet_bytes, sizeof(packet_bytes));
    pack->parse();
    record_node *node = pack->generate_record_node();

    dns_package_builder builder;
    builder.as_response().set_query(pack->getQuery()).set_answer_record(node);
    if (pack->isRD()) {
        builder.set_RD().set_resp_RA();
    }
    builder.set_id(pack->getQueryID()).set_opcode(DNS_OPCODE_STAND_QUERY);

    DnsPacket *result = builder.build();
    result->parse();

    ASSERT_EQ(result->get_size(), pack->get_size());
    ASSERT_EQ(result->get_size(), sizeof(packet_bytes));
    EXPECT_TRUE(memcmp(result->get_data(), packet_bytes, sizeof(packet_bytes)) == 0);
    delete result;
    delete pack;
    delete node;
}

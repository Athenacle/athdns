
CMAKE_MINIMUM_REQUIRED(VERSION 3.4)

PROJECT(dns)

SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake)
SET(WXCC_INCLUDE_ROOT ${CMAKE_SOURCE_DIR}/include/)

SET(CMAKE_CXX_STANDARD 14)
SET(PROJECT_NAME dns)
SET(PROJECT_VERSION 0.0.0)

STRING(TIMESTAMP WXCC_BUILD_TIME "%Y-%m-%d %H:%M:%SZ")

SET(CMAKE_EXPORT_COMPILE_COMMANDS ON)

IF(UNIX)
  SET(WXCC_BUILD_ON_UNIX "Build ON UNIX" ON)
  SET(WXCC_BUILD_ON_WINDOWS OFF)
ELSE()
  IF(WINDOWS)
    SET(WXCC_BUILD_ON_UNIX OFF)
    SET(WXCC_BUILD_ON_WINDOWS "Build ON Windows" ON)
  ENDIF()
ENDIF()


INCLUDE(Spdlog)
INCLUDE(CompilerOptionCheck)
INCLUDE(ConfigCheck)
INCLUDE(FindLibuv)
INCLUDE(FindJemalloc)
INCLUDE(TestBigEndian)

IF(${CMAKE_CXX_COMPILER_ID} STREQUAL Clang)
  ADD_DEFINITIONS(-fno-exceptions)
  ADD_DEFINITIONS(-Wno-undef)
  ADD_DEFINITIONS(-Wno-unused-macros)
ENDIF()

ADD_DEFINITIONS(-DHAVE_CONFIG_H)
ADD_DEFINITIONS(-DDEBUG_THIS)
ADD_DEFINITIONS(-pthread)

TEST_BIG_ENDIAN(ON_BIG_ENDIAN)

INCLUDE_DIRECTORIES(${WXCC_INCLUDE_ROOT})

AUX_SOURCE_DIRECTORY(dns WXCC_DRIVER_LIB_LIST)
AUX_SOURCE_DIRECTORY(server WXCC_DRIVER_LIB_LIST)

LIST(REMOVE_ITEM WXCC_DRIVER_LIB_LIST "server/main.cpp")

AUX_SOURCE_DIRECTORY(${CMAKE_SOURCE_DIR}/dns/ WXCC_LIB_SOURCE_LIST)

INCLUDE(FindFLEX)

FIND_PACKAGE(FLEX)

FLEX_TARGET(ConfigLexer ${CMAKE_SOURCE_DIR}/server/config_file.l ${CMAKE_CURRENT_BINARY_DIR}/flex_lexer.cpp)
LIST(APPEND WXCC_LIB_SOURCE_LIST ${CMAKE_CURRENT_BINARY_DIR}/flex_lexer.c)

ADD_LIBRARY(utils STATIC ${WXCC_LIB_SOURCE_LIST} ${WXCC_DRIVER_LIB_LIST})

ADD_EXECUTABLE(${PROJECT_NAME} ${CMAKE_SOURCE_DIR}/server/main.cpp)

SET(WXCC_LIBS ${WXCC_LIBS} utils)

INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/test ${LIBUV_INCLUDE_DIR})

IF(${JEMALLOC_FOUND})
  SET(HAVE_JEMALLOC ON)
  INCLUDE_DIRECTORIES(${JEMALLOC_INCLUDE_DIR})
  LIST(APPEND WXCC_LIBS jemalloc)
  ADD_DEFINITIONS(-fno-builtin-malloc)
  ADD_DEFINITIONS(-fno-builtin-free)
  ADD_DEFINITIONS(-fno-builtin-calloc)
  ADD_DEFINITIONS(-fno-builtin-realloc)
ENDIF()

CONFIGURE_FILE(${WXCC_INCLUDE_ROOT}/config.h.in
  ${WXCC_INCLUDE_ROOT}/config.h)

TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${LIBUV_LIBRARIES} ${WXCC_LIBS} pthread)
#test below


INCLUDE(Gtest)

IF(${CMAKE_CXX_COMPILER_ID} STREQUAL Clang)
  ADD_DEFINITIONS(-Wno-c++98-compat)
  ADD_DEFINITIONS(-Wno-c++98-compat-pedantic)
  ADD_DEFINITIONS(-Wno-c++98-compat-extra-semi)
  ADD_DEFINITIONS(-Wno-weak-vtables)
  # ADD_DEFINITIONS(-Wno-everythings)
  ADD_DEFINITIONS(-Wno-global-constructors)
ENDIF()

ADD_EXECUTABLE(dnstest
  ${CMAKE_SOURCE_DIR}/tests/test_dns.cpp
  ${CMAKE_SOURCE_DIR}/tests/utils.cpp
  ${CMAKE_SOURCE_DIR}/tests/test_utils.cpp
  ${CMAKE_SOURCE_DIR}/tests/hash_test.cpp
  ${CMAKE_SOURCE_DIR}/tests/main.cpp)

TARGET_LINK_LIBRARIES(dnstest libgtest ${WXCC_LIBS})
